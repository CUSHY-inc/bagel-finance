name: Deploy bagel-finance to EC2

on:
  push:
    branches:
      - "dev"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20.x"

      - name: Install dependencies
        run: npm install

      - name: Create .env file with environment variables
        run: |
          echo "WEB_URL=${{ vars.WEB_URL_DEV }}" > .env
          echo "NEXT_PUBLIC_BOT_NAME=${{ vars.NEXT_PUBLIC_BOT_NAME_DEV }}" >> .env
          echo "DATABASE_URL=${{ vars.DATABASE_URL_DEV }}" >> .env
          echo "NEXT_PUBLIC_MANIFEST_URL=${{ vars.NEXT_PUBLIC_MANIFEST_URL }}" >> .env
          echo "COINGECKO_API_KEY=${{ vars.COINGECKO_API_KEY }}" >> .env
          echo "TELEGRAM_BOT_TOKEN=${{ vars.TELEGRAM_BOT_TOKEN_DEV }}" >> .env
          echo "NETWORK=${{ vars.NETWORK_DEV }}" >> .env
          echo "SECRET_PHRASES=${{ secrets.SECRET_PHRASES }}" >> .env

      - name: Build project
        run: |
          npx prisma generate
          npm run build

      - name: Prepare artifacts
        run: |
          mkdir artifacts
          mv .next artifacts/
          mv .env artifacts/

      - name: Archive build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: artifacts/**/*
          include-hidden-files: true

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: ./artifacts

      - name: Delete build artifacts
        uses: geekyeggo/delete-artifact@v2
        with:
          name: build-artifacts

      - name: Setup SSH
        run: |
          echo "${{ secrets.SSH_KEY_PAIR }}" > ssh_key_pair.pem
          chmod 600 ssh_key_pair.pem

      - name: Deploy to multiple EC2 instances
        env:
          USER: ec2-user
          HOSTS: ${{ vars.EC2_HOSTS_DEV }}
        run: |
          IFS=',' read -ra HOST_ARRAY <<< "$HOSTS"

          for HOST in "${HOST_ARRAY[@]}"; do
            echo "Deploying to $HOST..."

            ssh -o StrictHostKeyChecking=no -i ssh_key_pair.pem "$USER@$HOST" << 'EOF'
              echo "Stopping application..."
              forever stop "bagel-finance" || true
              PID=$(fuser 3000/tcp 2>/dev/null)
              if [ -n "$PID" ]; then
                kill -9 $PID
              fi

              echo "Cleaning up old build..."
              rm -rf /home/ec2-user/app/bagel-finance/.next
              rm -rf /home/ec2-user/app/bagel-finance/.env
          EOF

            echo "Uploading artifacts to $HOST..."
            scp -r -o StrictHostKeyChecking=no -i ssh_key_pair.pem ./artifacts/.next "$USER@$HOST:/home/ec2-user/app/bagel-finance/"
            scp -r -o StrictHostKeyChecking=no -i ssh_key_pair.pem ./artifacts/.env "$USER@$HOST:/home/ec2-user/app/bagel-finance/"

            ssh -o StrictHostKeyChecking=no -i ssh_key_pair.pem "$USER@$HOST" << 'EOF'
              echo "Fetching latest source code..."
              cd /home/ec2-user/app/bagel-finance
              git fetch origin ${{ github.ref_name }}
              git checkout -B ${{ github.ref_name }} origin/${{ github.ref_name }}

              echo "Running migrations and installing dependencies..."
              npm install
              npx prisma migrate deploy
              npx prisma generate

              echo "Starting application..."
              mkdir -p /home/ec2-user/log/bagel-finance/
              forever start --uid "bagel-finance" -l /home/ec2-user/log/bagel-finance/$(date +'%Y%m%d%H%M%S').log --append -c "npm start" ./
          EOF

            echo "Deployment to $HOST completed."
          done
