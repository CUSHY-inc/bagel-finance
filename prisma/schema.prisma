datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id              String   @id
  username        String?
  firstName       String
  lastName        String?
  photoUrl        String?
  languageCode    String?
  isPremium       Boolean?
  isBot           Boolean?
  allowsWriteToPm Boolean?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now()) @updatedAt
  login           Login?
  point           Point?
  wallet          Wallet?
  votes           Vote[]
}

model Login {
  userId        String    @id
  lastBonusDate DateTime? 
  bonusDay      Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Point {
  userId    String   @id
  bagel     BigInt   @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Wallet {
  userId        String   @id
  address       String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Round {
  id          String   @id
  title       String
  startDate   DateTime @unique
  endDate     DateTime @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  choices     Choice[]
  votes       Vote[]
}

model Choice {
  id           String        @id
  roundId      String        
  idx          Int
  title        String
  description  String
  image        String
  result       Float?
  isWinner     Boolean?
  voteRate     Float?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now()) @updatedAt
  choiceTokens ChoiceToken[]
  round        Round         @relation(fields: [roundId], references: [id], onDelete: Cascade)
  votes        Vote[]

  @@index([roundId])
  @@unique([roundId, idx])
}

model Token {
  id           String        @id
  name         String
  symbol       String
  webSlug     String
  image        String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now()) @updatedAt
  choiceTokens ChoiceToken[]
}

model ChoiceToken {
  id         String   @id @default(cuid())
  choiceId   String
  tokenId    String
  proportion Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  choice     Choice   @relation(fields: [choiceId], references: [id], onDelete: Cascade)
  token      Token    @relation(fields: [tokenId], references: [id], onDelete: Cascade)

  @@unique([choiceId, tokenId])
  @@index([choiceId])
  @@index([tokenId])
}

model Vote {
  id        String   @id @default(cuid())
  userId    String
  roundId   String
  choiceId  String
  bet       BigInt
  isCorrect Boolean?
  payout    BigInt?
  isChecked Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  round     Round    @relation(fields: [roundId], references: [id], onDelete: Cascade)
  choice    Choice   @relation(fields: [choiceId], references: [id], onDelete: Cascade)

  @@unique([userId, roundId])
  
  @@index([roundId])
  @@index([choiceId])
}
